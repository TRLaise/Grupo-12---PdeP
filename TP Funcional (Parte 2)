-------------------------------------- PARTE 2 ----------------------------------------------
--Punto 1--
-- i) Si al consultar a la funcion "estaenpeligro" se le manda una línea con una cantidad infinita de zombies bases, 
esta entraría en un bucle infinito y no devolvería nada o a lo sumo un error de overflow ya que necesitaria sumar 
todo el ataque de los zombies de la lista, y si la lista es infinita, no va a poder terminar nunca.

--ii) Si al consultar si una línea con una cantidad infinita de PeaShooters necesita ser defendida, la funcion devolvería 
un False directamente ya que el primero de la lista (una Peashooter) no va a cumplir con la condicion por lo tanto devuelve False, 
en cambio si la linea tiene una cantidad infinita de Sunflowers la funcion entraría en bucle ya que todas las plantas son Sunflower 
y van a cumplir con la condicion lo que hace que la funcion siga evaluando hasta el infinito. 

--Punto 2--
cactus = Planta "cactus" 9 0 1

--Punto3--
type Horda = [(Zombie, Linea)]

horda1::Horda
horda1 =[(newsPaperZombie, linea2), (balloonZombie, linea1), (balloonZombie, linea1), (balloonZombie, linea3), (balloonZombie, linea3)]

type Jardin = [Linea]

jardin1 = [linea1,linea2,linea3]

agregarHordaLinea::Linea -> Horda -> Linea
agregarHordaLinea linea horda = linea{zombies = zombies linea ++ map fst (filter ((== linea).snd) horda)}

agregarHordaAJardin :: Jardin -> Horda -> Jardin
agregarHordaAJardin jardin horda = [agregarHordaLinea linea horda | linea <- jardin]

--Punto 4--

fuegoCruzado :: Planta -> Zombie -> Int -> (Planta,Zombie)
fuegoCruzado planta zombie cantAtaque = (plantaAtacada planta zombie cantAtaque, zombieAtacado planta zombie cantAtaque)

plantaAtacada::Planta -> Zombie -> Int -> Planta
plantaAtacada planta zombie cantAtaque= foldl (\planta _ -> resultadoAtaqueZombiePlanta zombie planta) planta [1..cantAtaque]

zombieAtacado::Planta -> Zombie -> Int -> Zombie
zombieAtacado planta zombie cantAtaque = foldl (\zombie _ -> resultadoAtaquePlantaZombie plantaAtacada zombie) zombie [1..cantAtaque]

--Punto5--

murioPlanta::(Planta,Zombie) -> Bool
murioPlanta fuegoCruzado = cantDeVida (fst fuegoCruzado) <= 0

murioZombie::(Planta,Zombie) -> Bool
murioZombie fuegoCruzado = null (nombreZombie (snd fuegoCruzado))

--Punto 6--

ataqueSistematico :: [Planta] -> Zombie -> [Planta]
ataqueSistematico plantas zombie = [fst (fuegoCruzado planta zombie 1) | planta <- plantas]

--Punto 7--

--Punto 8--
theZombiesAteYourBrains :: Jardin -> Horda -> Bool
theZombiesAteYourBrains jardin horda = gananLosZombies (agregarHordaJardin jardin horda)

gananLosZombies :: Jardin -> Bool
gananLosZombies = all muerenTodasLasPlantas

muerenTodasLasPlantas :: Linea -> Bool
muerenTodasLasPlantas linea = not (any ((> 0) . cantDeVida) (ataqueEnSerie linea))

ataqueEnSerie :: Linea -> [Planta]
ataqueEnSerie linea
  | null (zombies linea) = plantas linea
  | otherwise = ataqueEnSerie linea {plantas = ataqueSistematico (plantas linea) (head (zombies linea)), zombies = tail (zombies linea)}

--Punto 9--

tieneMenosLetras:: Zombie -> Linea -> Bool
tieneMenosLetras zombie linea = all (\zombieLinea -> nivelDeMuerte zombieLinea < nivelDeMuerte zombie) (zombies linea)

--Punto 10--

--La funcion ve si el valor h está en la lista. Si lo está, filtra de la lista los valores que cumplan con la función m y devuelve el primer elemento de esa lista. De lo contrario, devuelve el primer elemento de p.

--h es una variable de tipo, m es una funcion, y p es una dupla

--a) En este codigo vemos guardas, composicion, pattern matching, orden superior, polimorfismo paramétrico

--b) f variableBuscada funcion dupla lista | elem variableBuscada lista = head (filter (funcion variableBuscada) lista)
--                                      | otherwise = fst dupla

--c) Si la lista es infinita, la funcion no va a poder debolver nada porque va a seguir evaluado si el la variableBucada esta en la misma, por lo cual tirara un error de overflow ya que no habra mas memoria.

--Punto 11--

total = 0

sumaVidas::[Planta] -> Int
sumaVidas listaP = foldl (\total planta -> total + cantDeVida planta) total listaP

sumaMuertes::[Zombie] -> Int
sumaMuertes listaZ = foldl (\total zombie -> total + nivelDeMuerte zombie) total listaZ

nivelSupervivencia::Linea -> Int
nivelSupervivencia linea = sumaVidas (plantas linea) - sumaMuertes (zombies linea)
